#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('birdsong:server');
var http = require('http');
var https = require('https');

/**
 * Get port from environment and store in Express.
 */

var portHttp = normalizePort(process.env.PORT || '3000');
var portHttps = normalizePort(process.env.PORTHTTPS || '3001');
/**
 * Create HTTP or HTTPS server, depending on environment.
 */
var server;
if (app.get('env') === 'production') {
  app.set('port', portHttps);
  var options = require('../secret/tls-options.js');
  server = https.createServer(options, app);
  server.listen(portHttps);
  server.on('error', (err) => onError(err, portHttps));
  // a http server that just redirects users to https
  var httpToHttps = require('express')()
    .use((req, res) => res.redirect(['https://', req.get('Host'), req.url].join('')));
  httpToHttps.listen(portHttp);
  httpToHttps.on('error', (err) => onError(err, portHttp));
  httpToHttps.on('listening', () => onListening(httpToHttps));
} else {
  app.set('port', portHttp);
  server = http.createServer(app);
  server.listen(portHttp);
  server.on('error', (err) => onError(err, portHttp));
}
server.on('listening', () => onListening(server));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error, port) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
